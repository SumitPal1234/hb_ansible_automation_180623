---
- name: Provision AWS resources
  hosts: localhost
  gather_facts: false

  vars:
    image_id: "ami-0f5ee92e2d63afc18"
    instance_type: "t2.micro"
    aws_region: "ap-south-1"
    cidr_block: "10.10.0.0/16"
    tag_name: "test"
    env: "testing"

  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: "vpc-{{ aws_region }}-{{ tag_name }}"
        cidr_block: "{{ cidr_block }}"
        region: "{{ aws_region }}"
        instance_tenancy: "default"
        tags:
          Name: "vpc-{{ aws_region }}-{{ tag_name }}"
          Environment: "{{ env }}"
      register: vpc

    - name: Create Windows Subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.id }}"
        cidr: "10.10.0.0/28"
        az: "{{ aws_region }}a"
        region: "{{ aws_region }}"
        tags:
          Name: "Main1"
      register: windows_subnet

    - name: Create Linux Subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.id }}"
        cidr: "10.10.0.16/28"
        az: "{{ aws_region }}a"
        region: "{{ aws_region }}"
        tags:
          Name: "Main2"
      register: linux_subnet

    - name: Create Security Group for Windows
      ec2_group:
        name: "allow_tls"
        description: "Allow TLS inbound traffic"
        vpc_id: "{{ vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "111.93.207.132/32"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "115.241.48.58/32"
        outbound_rules:
          - proto: -1
            from_port: 0
            to_port: 0
            cidr_ip: "0.0.0.0/0"
      register: windows_sg

    - name: Create Security Group for Linux
      ec2_group:
        name: "allow_tls_linux"
        description: "Allow TLS inbound traffic"
        vpc_id: "{{ vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ windows_subnet.subnet.cidr_block }}"
        outbound_rules:
          - proto: -1
            from_port: 0
            to_port: 0
            cidr_ip: "0.0.0.0/0"
      register: linux_sg

    - name: Create Internet Gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.id }}"
        region: "{{ aws_region }}"
        tags:
          Name: "igw-aws_internet_gateway"
          Environment: "{{ env }}"
      register: igw

    - name: Allocate Elastic IP
      ec2_eip:
        vpc: yes
        region: "{{ aws_region }}"
        tags:
          Name: "aws_eip.eip"
          Environment: "{{ env }}"
      register: eip

    - name: Create NAT Gateway
      ec2_vpc_nat_gateway:
        subnet_id: "{{ linux_subnet.subnet.id }}"
        allocation_id: "{{ eip.allocation_id }}"
        region: "{{ aws_region }}"
        tags:
          Name: "gw NAT"
      register: nat_gw

    - name: Create Default Route Table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.id }}"
        region: "{{ aws_region }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
      register: default_rt

    - name: Create Private Route Table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.id }}"
        region: "{{ aws_region }}"
        tags:
          Name: "main"
      register: private_rt

    - name: Associate Subnet with Private Route Table
      ec2_vpc_subnet_route_table_association:
        subnet_id: "{{ linux_subnet.subnet.id }}"
        route_table_id: "{{ private_rt.route_table.id }}"
        region: "{{ aws_region }}"

    - name: Add NAT Gateway route to Private Route Table
      ec2_vpc_route:
        route_table_id: "{{ private_rt.route_table.id }}"
        dest: "0.0.0.0/0"
        gateway_id: "{{ nat_gw.nat_gateway_id }}"
        region: "{{ aws_region }}"

    - name: Provision Bastion Instance (Windows)
      ec2:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        region: "{{ aws_region }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image_id }}"
        key_name: "key-sumit-test"
        vpc_subnet_id: "{{ windows_subnet.subnet.id }}"
        assign_public_ip: yes
        security_group: "{{ windows_sg.group_id }}"
        count: 1
        instance_tags:
          Name: "ansible-master-node"
          Environment: "{{ env }}"
      register: windows_instance

    - name: Provision EC2 Instance (Linux)
      ec2:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        region: "{{ aws_region }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image_id }}"
        key_name: "key-sumit-test"
        vpc_subnet_id: "{{ linux_subnet.subnet.id }}"
        security_group: "{{ linux_sg.group_id }}"
        count: 1
        instance_tags:
          Name: "Client-node"
          Environment: "{{ env }}"
      register: linux_instance
